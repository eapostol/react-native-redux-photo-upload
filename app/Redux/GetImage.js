/**
    Download the list of profile and thumbs 
    and set them in the global state
**/

/**
    Actions
**/
export const GET_THUMB_LIST = 'GET_THUMB_LIST';
export const GET_THUMB_LIST_SUCCESS = 'GET_THUMB_LIST_SUCCESS';
export const GET_THUMB_LIST_FAIL = 'GET_THUMB_LIST_FAIL';
export const SET_THUMB_SOURCE = 'SET_THUMB_SOURCE';
export const SET_THUMB_SOURCE_FAIL = 'SET_THUMB_SOURCE_FAIL';

const initialUserStates = {
    thumbSource: []
}

/**
    Action creators.
    This has been coupled with axios
    through middleware so it can handle requests
**/

export function getThumbList(i) {
    return {
        type: GET_THUMB_LIST,
        payload: {
            request: {
                method: 'GET',
                url:'http/t-'+[i]+'.jpg',
                responseType: 'blob'
            }
        }
    };
}

/**
    We dont need action creator for GET_THUMB_LIST_SUCCESS(_FAIL)
    because they are generated by axios after the called.
    Just define the action type and reduce the response into state
**/

export function setThumbSource(filename) {
    return {
        type: SET_THUMB_SOURCE,
        payload: filename
    };
}

/**
    Reducers
    Make a copy of the current state (...state)
    Then set the new value for state with whatever key you name it
    and the data from action.payload
    Access in component through mapStateToProps
**/
export default function reducer(state = initialUserStates, action) {
    switch (action.type) {
    case GET_THUMB_LIST_SUCCESS:
        return { 
            ...state,
            thumbList: action.payload.data
        }
    case GET_THUMB_LIST_FAIL:
        return {
            ...state,
            errorText: "Photo was not available"
        }
    case SET_THUMB_SOURCE:
        console.log("Redux payload: " + action.payload)
        return {
            ...state,
            thumbSource: [...state.thumbSource, action.payload]
        }
    case SET_THUMB_SOURCE_FAIL:
        return {
            ...state,
            errorText: "Set thumb uri failed"
        }
    default:
      return state
    }
}